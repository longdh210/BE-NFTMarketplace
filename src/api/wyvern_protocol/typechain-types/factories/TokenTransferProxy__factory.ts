/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TokenTransferProxy,
  TokenTransferProxyInterface,
} from "../TokenTransferProxy";

const _abi = [
  {
    inputs: [],
    name: "registry",
    outputs: [
      {
        internalType: "contract ProxyRegistry",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061024e806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806315dacbea1461003b5780637b10399914610063575b600080fd5b61004e6100493660046101a4565b61008e565b60405190151581526020015b60405180910390f35b600054610076906001600160a01b031681565b6040516001600160a01b03909116815260200161005a565b600080546040516369dc9ff360e01b81523360048201526001600160a01b03909116906369dc9ff390602401602060405180830381865afa1580156100d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100fb91906101ef565b61010457600080fd5b6040516323b872dd60e01b81526001600160a01b0385811660048301528481166024830152604482018490528616906323b872dd906064016020604051808303816000875af115801561015b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061017f91906101ef565b95945050505050565b80356001600160a01b038116811461019f57600080fd5b919050565b600080600080608085870312156101ba57600080fd5b6101c385610188565b93506101d160208601610188565b92506101df60408601610188565b9396929550929360600135925050565b60006020828403121561020157600080fd5b8151801515811461021157600080fd5b939250505056fea2646970667358221220e80a97bd56f1e0a773608955dc8f2580f2d92910325d5a8d02591699a421990764736f6c634300080b0033";

type TokenTransferProxyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TokenTransferProxyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TokenTransferProxy__factory extends ContractFactory {
  constructor(...args: TokenTransferProxyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TokenTransferProxy> {
    return super.deploy(overrides || {}) as Promise<TokenTransferProxy>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TokenTransferProxy {
    return super.attach(address) as TokenTransferProxy;
  }
  connect(signer: Signer): TokenTransferProxy__factory {
    return super.connect(signer) as TokenTransferProxy__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenTransferProxyInterface {
    return new utils.Interface(_abi) as TokenTransferProxyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TokenTransferProxy {
    return new Contract(address, _abi, signerOrProvider) as TokenTransferProxy;
  }
}
