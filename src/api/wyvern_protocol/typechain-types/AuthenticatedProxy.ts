/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface AuthenticatedProxyInterface extends utils.Interface {
  functions: {
    "initialize(address,address)": FunctionFragment;
    "proxy(address,uint8,bytes)": FunctionFragment;
    "proxyAssert(address,uint8,bytes)": FunctionFragment;
    "receiveApproval(address,uint256,address,bytes)": FunctionFragment;
    "registry()": FunctionFragment;
    "revoked()": FunctionFragment;
    "setRevoke(bool)": FunctionFragment;
    "upgradeabilityOwner()": FunctionFragment;
    "user()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "proxy",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "proxyAssert",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveApproval",
    values: [string, BigNumberish, string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(functionFragment: "revoked", values?: undefined): string;
  encodeFunctionData(functionFragment: "setRevoke", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "upgradeabilityOwner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "user", values?: undefined): string;

  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "proxy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxyAssert",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveApproval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revoked", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRevoke", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeabilityOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "user", data: BytesLike): Result;

  events: {
    "ReceivedEther(address,uint256)": EventFragment;
    "ReceivedTokens(address,uint256,address,bytes)": EventFragment;
    "Revoked(bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ReceivedEther"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReceivedTokens"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Revoked"): EventFragment;
}

export type ReceivedEtherEvent = TypedEvent<
  [string, BigNumber],
  { sender: string; amount: BigNumber }
>;

export type ReceivedEtherEventFilter = TypedEventFilter<ReceivedEtherEvent>;

export type ReceivedTokensEvent = TypedEvent<
  [string, BigNumber, string, string],
  { from: string; value: BigNumber; token: string; extraData: string }
>;

export type ReceivedTokensEventFilter = TypedEventFilter<ReceivedTokensEvent>;

export type RevokedEvent = TypedEvent<[boolean], { revoked: boolean }>;

export type RevokedEventFilter = TypedEventFilter<RevokedEvent>;

export interface AuthenticatedProxy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AuthenticatedProxyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    initialize(
      addrUser: string,
      addrRegistry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proxy(
      dest: string,
      howToCall: BigNumberish,
      _calldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proxyAssert(
      dest: string,
      howToCall: BigNumberish,
      _calldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    receiveApproval(
      from: string,
      value: BigNumberish,
      token: string,
      extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registry(overrides?: CallOverrides): Promise<[string]>;

    revoked(overrides?: CallOverrides): Promise<[boolean]>;

    setRevoke(
      revoke: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeabilityOwner(overrides?: CallOverrides): Promise<[string]>;

    user(overrides?: CallOverrides): Promise<[string]>;
  };

  initialize(
    addrUser: string,
    addrRegistry: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proxy(
    dest: string,
    howToCall: BigNumberish,
    _calldata: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proxyAssert(
    dest: string,
    howToCall: BigNumberish,
    _calldata: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  receiveApproval(
    from: string,
    value: BigNumberish,
    token: string,
    extraData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registry(overrides?: CallOverrides): Promise<string>;

  revoked(overrides?: CallOverrides): Promise<boolean>;

  setRevoke(
    revoke: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeabilityOwner(overrides?: CallOverrides): Promise<string>;

  user(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    initialize(
      addrUser: string,
      addrRegistry: string,
      overrides?: CallOverrides
    ): Promise<void>;

    proxy(
      dest: string,
      howToCall: BigNumberish,
      _calldata: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    proxyAssert(
      dest: string,
      howToCall: BigNumberish,
      _calldata: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    receiveApproval(
      from: string,
      value: BigNumberish,
      token: string,
      extraData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    registry(overrides?: CallOverrides): Promise<string>;

    revoked(overrides?: CallOverrides): Promise<boolean>;

    setRevoke(revoke: boolean, overrides?: CallOverrides): Promise<void>;

    upgradeabilityOwner(overrides?: CallOverrides): Promise<string>;

    user(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "ReceivedEther(address,uint256)"(
      sender?: string | null,
      amount?: null
    ): ReceivedEtherEventFilter;
    ReceivedEther(
      sender?: string | null,
      amount?: null
    ): ReceivedEtherEventFilter;

    "ReceivedTokens(address,uint256,address,bytes)"(
      from?: string | null,
      value?: null,
      token?: string | null,
      extraData?: null
    ): ReceivedTokensEventFilter;
    ReceivedTokens(
      from?: string | null,
      value?: null,
      token?: string | null,
      extraData?: null
    ): ReceivedTokensEventFilter;

    "Revoked(bool)"(revoked?: null): RevokedEventFilter;
    Revoked(revoked?: null): RevokedEventFilter;
  };

  estimateGas: {
    initialize(
      addrUser: string,
      addrRegistry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proxy(
      dest: string,
      howToCall: BigNumberish,
      _calldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proxyAssert(
      dest: string,
      howToCall: BigNumberish,
      _calldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    receiveApproval(
      from: string,
      value: BigNumberish,
      token: string,
      extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;

    revoked(overrides?: CallOverrides): Promise<BigNumber>;

    setRevoke(
      revoke: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeabilityOwner(overrides?: CallOverrides): Promise<BigNumber>;

    user(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    initialize(
      addrUser: string,
      addrRegistry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proxy(
      dest: string,
      howToCall: BigNumberish,
      _calldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proxyAssert(
      dest: string,
      howToCall: BigNumberish,
      _calldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    receiveApproval(
      from: string,
      value: BigNumberish,
      token: string,
      extraData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    revoked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setRevoke(
      revoke: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeabilityOwner(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    user(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
